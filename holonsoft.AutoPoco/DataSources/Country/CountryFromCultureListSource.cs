using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using holonsoft.AutoPoco.Configuration;
using holonsoft.AutoPoco.DataSources.Base;

namespace holonsoft.AutoPoco.DataSources.Country;
public abstract class CountryFromCultureListSourceBase(int? nullCreationThreshold = null) : FixedArrayWithStringsSourceBase(nullCreationThreshold) {
   private static readonly string[] _englishCountryNamesFromCultureList;
   protected override string[] Data => _englishCountryNamesFromCultureList;

   static CountryFromCultureListSourceBase()
      => _englishCountryNamesFromCultureList = CultureInfo
         .GetCultures(CultureTypes.AllCultures & ~CultureTypes.NeutralCultures)
         .Where(x => !x.EnglishName.Contains(','))
         .Select(x => x.EnglishName)
         .Select(FormatEnglishName)
         .Distinct()
         .OrderBy(FormatEnglishName)
         .ToArray();

   private static string FormatEnglishName(string englishName) {
      var startIndex = englishName.IndexOf("(", StringComparison.Ordinal) + 1;
      var endIndex = englishName.IndexOf(")", StringComparison.Ordinal);

      if (startIndex > 0 && endIndex > startIndex)
         return englishName[startIndex..endIndex];

      return englishName;
   }
}

/// <summary>
///   The country source. Generated by reading all cultures 
/// </summary>
public class CountryFromCultureListSource : CountryFromCultureListSourceBase {
   public CountryFromCultureListSource() : base() { }
}

/// <summary>
///   The country source. Generated by reading all cultures 
///   Result can be NULL, too 
/// </summary>
public class NullableCountryFromCultureListSource : CountryFromCultureListSourceBase {
   public NullableCountryFromCultureListSource() : base(AutoPocoGlobalSettings.NullCreationThreshold) { }

   public NullableCountryFromCultureListSource(int nullCreationThreshold) : base(nullCreationThreshold) { }
}
